# -*- coding: utf-8 -*-
"""3B-CALAPAO-MP2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hfruYVxm2rmONTlk7yFpj3hSLauLk8Ou

# Propositional Logic Operations
"""

def and_operation(p, q):
    return p and q

def or_operation(p, q):
    return p or q

def not_operation(p):
    return not p

def implies_operation(p, q):
    return not p or q

"""# Evaluate Logical Statements"""

def evaluate(statement, values):
    expression = statement
    for var, val in values.items():
        expression = expression.replace(var, str(val))
    return eval(expression)

"""# Extend to Predicate Logic

Universal Quantifier
"""

def for_all(predicate, domain):
    return all(predicate(x) for x in domain)

"""Existential Quantifier"""

def exists(predicate, domain):
    return any(predicate(x) for x in domain)

"""# AI Agent Development"""

def clothing_advisor(conditions):
    temperature = conditions['temperature']
    is_raining = conditions['is_raining']
    is_windy = conditions['is_windy']

    if temperature < 10:
        if is_raining:
            return "Wear a Jacket and Carry an Umbrella"
        elif is_windy:
            return "Wear a Windbreaker"
        else:
            return "Wear a Jacket"
    elif 10 <= temperature <= 20:
        if is_raining:
            return "Wear a Sweater and Carry an Umbrella"
        else:
            return "Wear a Sweater"
    elif temperature > 20:
        if is_raining:
            return "Wear a T-Shirt and Carry an Umbrella"
        else:
            return "Wear a T-Shirt"
    else:
        return "Stay Indoors"

"""Implementing the Decision Logic"""

conditions = {'temperature': 15, 'is_raining': True, 'is_windy': False}
decision = clothing_advisor(conditions)
print(f"AI Decision: {decision}")